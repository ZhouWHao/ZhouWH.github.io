<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zwh | Blog</title>
  <subtitle>天下风云出我辈，一入公司岁月催。十指无力眼睛花，脖痛腰老肩膀脆。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-10T02:48:15.410Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zwh Blog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript全栈之道</title>
    <link href="http://yoursite.com/2016/12/10/zwh7/"/>
    <id>http://yoursite.com/2016/12/10/zwh7/</id>
    <published>2016-12-10T02:33:00.000Z</published>
    <updated>2016-12-10T02:48:15.410Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/fullstack.png" alt=""></p>
<p>JavaScript 全栈工程师培训教程</p>
<a id="more"></a>
<h2 id="一、培训准备"><a href="#一、培训准备" class="headerlink" title="一、培训准备"></a>一、培训准备</h2><p>参加培训的学员，事先应该做好以下准备工作。</p>
<h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><ul>
<li>掌握 HTML、CSS、JS 的基本用法</li>
<li>掌握命令行的基本用法<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2></li>
</ul>
<p>请到官网 git-scm.com 或国内的下载站，下载安装包。</p>
<h2 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h2><p>请到 Node 官网nodejs.org，或者国内镜像npm.taobao.org/mirrors/node，下载安装包。推荐安装最新的稳定版，目前是v6.x。</p>
<p>安装完成后，命令行执行下面的命令，确认是否安装成功。</p>
<pre><code>$ node -v
v6.9.1
</code></pre><p>Node 的模块管理器 npm 会一起安装好。由于 Node 的官方模块仓库网速太慢，模块仓库需要切换到阿里的源。</p>
<pre><code>$ npm config set registry https://registry.npm.taobao.org/
</code></pre><p>执行下面的命令，确认是否切换成功。</p>
<pre><code>$ npm config get registry
</code></pre><h2 id="安装-Postman"><a href="#安装-Postman" class="headerlink" title="安装 Postman"></a>安装 Postman</h2><p>Postman 是一个 HTTP 通信测试工具，REST API 的练习会用到它。</p>
<p>请到官网 GetPostman.com 下载独立安装包；也可以参考这篇文章www.cnblogs.com/mafly/p/postman.html，下载 Chrome 浏览器的插件，它们的效果一样。</p>
<h2 id="安装示例库"><a href="#安装示例库" class="headerlink" title="安装示例库"></a>安装示例库</h2><p>所有的讲义和练习源码，都是开源的，网址是 github.com/ruanyf/jstraining。执行下面的命令，将这个库拷贝到你的硬盘上。</p>
<pre><code># Linux &amp; Mac
$ git clone git@github.com:ruanyf/jstraining.git

# Windows
$ git clone https://github.com/ruanyf/jstraining.git
</code></pre><p>如果因为种种原因，Git 命令行无法使用，也可以直接下载压缩包，地址是 <a href="https://github.com/ruanyf/jstraining/archive/master.zip" target="_blank" rel="external">https://github.com/ruanyf/jstraining/archive/master.zip</a> 。</p>
<h2 id="二、前端开发的历史和趋势"><a href="#二、前端开发的历史和趋势" class="headerlink" title="二、前端开发的历史和趋势"></a>二、前端开发的历史和趋势</h2><hr>
<h2 id="什么是前端"><a href="#什么是前端" class="headerlink" title="什么是前端"></a>什么是前端</h2><ul>
<li>前端：针对浏览器的开发，代码在浏览器运行</li>
<li>后端：针对服务器的开发，代码在服务器运行</li>
</ul>
<p><img src="/assets/blogImg/webandserver.png" alt=""></p>
<hr>
<h2 id="前后端不分的时代"><a href="#前后端不分的时代" class="headerlink" title="前后端不分的时代"></a>前后端不分的时代</h2><p>互联网发展的早期，前后端开发是一体的，前端代码是后端代码的一部分。</p>
<ol>
<li>后端收到浏览器的请求</li>
<li>生成静态页面</li>
<li>发送到浏览器</li>
</ol>
<hr>
<h2 id="后端-MVC-的开发模式"><a href="#后端-MVC-的开发模式" class="headerlink" title="后端 MVC 的开发模式"></a>后端 MVC 的开发模式</h2><p>那时的网站开发，采用的是后端 MVC 模式。</p>
<ul>
<li>Model（模型层）：提供/保存数据</li>
<li>Controller（控制层）：数据处理，实现业务逻辑</li>
<li>View（视图层）：展示数据，提供用户界面</li>
</ul>
<p>前端只是后端 MVC 的 V。</p>
<hr>
<p>以 PHP 框架 Laravel 为例。</p>
<p><img src="/assets/blogImg/phpflow.png" alt=""></p>
<hr>
<h2 id="前端工程师的角色"><a href="#前端工程师的角色" class="headerlink" title="前端工程师的角色"></a>前端工程师的角色</h2><p>那时的前端工程师，实际上是模板工程师，负责编写页面模板。</p>
<p>后端代码读取模板，替换变量，渲染出页面。</p>
<hr>
<h2 id="典型的-PHP-模板"><a href="#典型的-PHP-模板" class="headerlink" title="典型的 PHP 模板"></a>典型的 PHP 模板</h2><pre><code>&lt;html&gt;
  &lt;head&gt;&lt;title&gt;Car {{ $car->id }}&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;
&lt;h1&gt;Car {{ $car->id }}&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Make: {{ $car->make }}&lt;/li&gt;
  &lt;li&gt;Model: {{ $car->model }}&lt;/li&gt;
  &lt;li&gt;Produced on: {{ $car->produced_on }}&lt;/li&gt;
&lt;/ul&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><hr>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>Ajax 技术诞生，改变了一切。</p>
<ul>
<li>2004年：Gmail</li>
<li>2005年：Google 地图</li>
</ul>
<p>前端不再是后端的模板，可以独立得到各种数据。</p>
<hr>
<p><img src="/assets/blogImg/web20.gif" alt=""></p>
<p>Ajax 技术促成了 Web 2.0 的诞生。</p>
<p>web2.png</p>
<ul>
<li>Web 1.0：静态网页，纯内容展示</li>
<li>Web 2.0：动态网页，富交互，前端数据处理</li>
</ul>
<p>从那时起，前端变得复杂了，对前端工程师的要求越来越高。</p>
<hr>
<p>前端 MVC 框架</p>
<p>前端通过 Ajax 得到数据，因此也有了处理数据的需求。</p>
<p>前端代码变得也需要保存数据、处理数据、生成视图，这导致了前端 MVC 框架的诞生。</p>
<ul>
<li>2010年，Backbone.js</li>
</ul>
<p><img src="/assets/blogImg/Backbone.png" alt=""></p>
<hr>
<h2 id="Backbone-js"><a href="#Backbone-js" class="headerlink" title="Backbone.js"></a>Backbone.js</h2><p>Backbone 将前端代码分成两个基本部分。</p>
<ul>
<li>Model：管理数据</li>
<li>View：数据的展现</li>
</ul>
<p><img src="/assets/blogImg/backbone-model-view.png" alt=""></p>
<hr>
<h2 id="前端-Controller"><a href="#前端-Controller" class="headerlink" title="前端 Controller"></a>前端 Controller</h2><p>Backbone 只有 M 和 V，没有 C。因为，前端 Controller 与后端不同。</p>
<ul>
<li>不需要，也不应该处理业务逻辑</li>
<li>只需要处理 UI 逻辑，响应用户的一举一动</li>
</ul>
<p>所以，前端 Controller 相对比较简单。Backbone 没有 C，只用事件来处理 UI 逻辑。</p>
<pre><code>  var AppView = Backbone.View.extend({
// ...
events: {

  &quot;keypress #new-todo&quot;:  &quot;createOnEnter&quot;,

  &quot;click #clear-completed&quot;: &quot;clearCompleted&quot;,

  &quot;click #toggle-all&quot;: &quot;toggleAllComplete&quot;

},
  });
</code></pre><hr>
<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p>前端还有一种天然的方法，可以切换视图，那就是 URL。</p>
<p>通过 URL 切换视图，这就是 Router（路由）的作用。以 Backbone 为例。</p>
<p><img src="/assets/blogImg/backbone-routing.png" alt=""></p>
<pre><code>App.Router = Backbone.Router.extend({
  routes: {
&apos;&apos;: &apos;index&apos;,
&apos;show&apos;: &apos;show&apos;
},
  index: function () {
$(document.body).append(&quot;调用了 Index 路由&quot;);
  },
  show: function () {
$(document.body).append(&quot;调用了 Show 路由&quot;);
  },
});
</code></pre><hr>
<h2 id="示例：Backbone-Router"><a href="#示例：Backbone-Router" class="headerlink" title="示例：Backbone Router"></a>示例：Backbone Router</h2><p>打开demos/backbone-demo/index.html，按照《操作说明》，查看示例。</p>
<p><img src="/assets/blogImg/BackboneRouting.png" alt=""></p>
<hr>
<h2 id="MVVM-模式"><a href="#MVVM-模式" class="headerlink" title="MVVM 模式"></a>MVVM 模式</h2><p>另一些框架提出 MVVM 模式，用 View Model 代替 Controller。</p>
<ul>
<li>Model</li>
<li>View</li>
<li>View-Model：简化的 Controller，唯一作用就是为 View 提供处理好的数据，不含其他逻辑。</li>
</ul>
<p>本质：view 绑定 view-model，视图与数据模型强耦合。数据的变化实时反映在 view 上，不需要手动处理。</p>
<p><img src="/assets/blogImg/MVVM.png" alt=""></p>
<hr>
<h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><p>前端可以做到：</p>
<ul>
<li>读写数据</li>
<li>切换视图</li>
<li>用户交互</li>
</ul>
<p>这意味着，网页其实是一个应用程序。</p>
<p>SPA = Single-page application<br>2010年后，前端工程师从开发页面，变成了开发”前端应用“（跑在浏览器里面的应用程序）。</p>
<hr>
<h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><p>Google 公司推出的 Angular 是最流行的 MVVM 前端框架。</p>
<p>它的风格属于 HTML 语言的增强，核心概念是双向绑定。</p>
<p><img src="/assets/blogImg/angular.png" alt=""></p>
<hr>
<h2 id="示例：Angular-的双向绑定"><a href="#示例：Angular-的双向绑定" class="headerlink" title="示例：Angular 的双向绑定"></a>示例：Angular 的双向绑定</h2><p>浏览器打开demos/angular-demo/index.html，可以看到一个输入框。</p>
<p><img src="/assets/blogImg/zhangsan.png" alt=""></p>
<hr>
<pre><code>&lt;div ng-app=&quot;&quot;&gt;
  &lt;p&gt;
姓名 :
&lt;input
  type=&quot;text&quot;
  ng-model=&quot;name&quot;
  placeholder=&quot;在这里输入您的大名&quot;
&gt;
  &lt;/p&gt;
  &lt;h1&gt;你好，{{name}}&lt;/h1&gt;
&lt;/div&gt;
</code></pre><hr>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>Vue.js 是现在很热门的一种前端 MVVM 框架。</p>
<p>它的基本思想与 Angular 类似，但是用法更简单，而且引入了响应式编程的概念。</p>
<p><img src="/assets/blogImg/vue.png" alt=""></p>
<hr>
<h2 id="示例：Vue-的双向绑定"><a href="#示例：Vue-的双向绑定" class="headerlink" title="示例：Vue 的双向绑定"></a>示例：Vue 的双向绑定</h2><p>Vue 的模板与数据，是双向绑定的。</p>
<p>打开demos/vue-demo/index1.html，按照《操作说明》，查看示例。</p>
<p><img src="/assets/blogImg/VueInput.png" alt=""></p>
<hr>
<p>HTML 代码</p>
<pre><code>&lt;div id=&quot;journal&quot;&gt;
  &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;
  &lt;div&gt;{{message}}&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>JS 代码</p>
<pre><code>var journal = new Vue({
  el: &apos;#journal&apos;,
  data: {
message: &apos;Your first entry&apos;
  }
});
</code></pre><hr>
<h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><ul>
<li>Ajax -&gt; 前端应用兴起</li>
<li>智能手机 -&gt; 多终端支持<br>这两个原因，导致前端开发方式发生根本的变化。</li>
</ul>
<p>前端不再是后端 MVC 中的 V，而是单独的一层。</p>
<hr>
<h2 id="REST-接口"><a href="#REST-接口" class="headerlink" title="REST 接口"></a>REST 接口</h2><p>前后端分离以后，它们之间通过接口通信。</p>
<p>后端暴露出接口，前端消费后端提供的数据。</p>
<p>后端接口一般是 REST 形式，前后端的通信协议一般是 HTTP。</p>
<hr>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>2009年，Node 项目诞生，它是服务器上的 JavaScript 运行环境。</p>
<p>Node = JavaScript + 操作系统 API</p>
<p><img src="/assets/blogImg/node-logo.png" alt=""></p>
<hr>
<h2 id="Node-的意义"><a href="#Node-的意义" class="headerlink" title="Node 的意义"></a>Node 的意义</h2><ul>
<li>JavaScript 成为服务器脚本语言，与 Python 和 Ruby 一样</li>
<li>JavaScript 成为唯一的浏览器和服务器都支持的语言</li>
<li>前端工程师可以编写后端程序了</li>
</ul>
<hr>
<h2 id="前端开发模式的根本改变"><a href="#前端开发模式的根本改变" class="headerlink" title="前端开发模式的根本改变"></a>前端开发模式的根本改变</h2><ul>
<li>Node 环境下开发</li>
<li>大量使用服务器端工具</li>
<li>引入持续集成等软件工程的标准流程</li>
<li>开发完成后，编译成浏览器可以运行的脚本，放上 CDN</li>
</ul>
<hr>
<h2 id="全栈工程师"><a href="#全栈工程师" class="headerlink" title="全栈工程师"></a>全栈工程师</h2><p>前端工程师正在转变为全栈工程师</p>
<ul>
<li>一个人负责开发前端和后端</li>
<li>从数据库到 UI 的所有开发</li>
</ul>
<hr>
<h2 id="全栈技能"><a href="#全栈技能" class="headerlink" title="全栈技能"></a>全栈技能</h2><p>怎样才能称为全栈工程师？</p>
<ul>
<li>传统前端技能：HTML、JavaScript、CSS</li>
<li>一门后端语言</li>
<li>移动端开发：iOS / Android / HTML5</li>
<li>其他技能：数据库、HTTP 等等</li>
</ul>
<hr>
<h2 id="软件行业的发展动力"><a href="#软件行业的发展动力" class="headerlink" title="软件行业的发展动力"></a>软件行业的发展动力</h2><p>历史演变：前后端不分 -&gt; 前后端分离 -&gt; 全栈工程师</p>
<p>动力：更加产业化、大规模地生产软件</p>
<ul>
<li>效率更高</li>
<li>成本更低</li>
</ul>
<p>通用性好、能够快速产出的技术最终会赢，单个程序员的生产力要求越来越高。</p>
<hr>
<h2 id="H5-就是一个最好的例子"><a href="#H5-就是一个最好的例子" class="headerlink" title="H5 就是一个最好的例子"></a>H5 就是一个最好的例子</h2><p>为什么 H5 技术会赢得移动端？</p>
<ul>
<li>开发速度快：Native 需要重新编译才能看到结果，H5 是即时输出</li>
<li>开发成本低：Native 需要两个开发团队，H5 只要一个</li>
<li>快速发布：安卓 Native 新版本需要24小时，iOS 需要 3 ～ 4 天，H5 可以随时更新</li>
</ul>
<hr>
<h2 id="未来软件的特点"><a href="#未来软件的特点" class="headerlink" title="未来软件的特点"></a>未来软件的特点</h2><ul>
<li>联网</li>
<li>高并发</li>
<li>分布式</li>
<li>跨终端<br>现在基于 Web 的前端技术，将演变为未来所有软件的通用的 GUI 解决方案。</li>
</ul>
<hr>
<h2 id="未来只有两种软件工程师"><a href="#未来只有两种软件工程师" class="headerlink" title="未来只有两种软件工程师"></a>未来只有两种软件工程师</h2><ul>
<li>端工程师<ul>
<li>手机端</li>
<li>PC 端</li>
<li>TV 端</li>
<li>VR 端</li>
<li>……</li>
</ul>
</li>
<li>云工程师</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/fullstack.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript 全栈工程师培训教程&lt;/p&gt;
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>游戏纯属爱好</title>
    <link href="http://yoursite.com/2016/12/09/zwh6/"/>
    <id>http://yoursite.com/2016/12/09/zwh6/</id>
    <published>2016-12-09T07:28:00.000Z</published>
    <updated>2016-12-09T08:28:17.255Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/elin1.png" alt=""></p>
<p>&emsp;&emsp;小的时候玩什么？2007年我才学会自己申请QQ，那时候记性不好，还把QQ号写在纸上，去网吧的时候，老是揣个小纸条儿。<br><a id="more"></a><br>&emsp;&emsp;QQ差不多玩儿了一年多不知不觉就记住了，不可否认的说，那时候确实沉迷游戏，小游戏玩小霸王游戏机的超级玛丽，大游戏到Ps4的铁拳，那时候去网吧简直就是一种奢华，平时都是玩儿街机，就投币那种，一块钱10个币，后来玩的多了，就开始联机玩儿GTA和一些主流的单机盗版游戏，什么单机CF，单机DNF就没有不玩儿的，每天10块钱的零花钱，全都省吃俭用的留下来，买盗版光碟，装单机游戏玩儿，就随便一个游戏能玩儿好几个月，下面来介绍一下我玩儿过的感觉比较经典的单机游戏</p>
<p>1.真三国无双</p>
<p><img src="/assets/blogImg/lvbu.png" alt=""></p>
<p>那时候是我第一次接触到这种日本制作的三国题材的大型单机游戏，当时用的配的垃圾联想电脑，集成显卡，G610，也就只能玩玩这种低端的，配置要求不是很高。</p>
<p>2.GTA 圣安地列斯</p>
<p>神龙</p>
<p><img src="/assets/blogImg/long2.png" alt=""></p>
<p>控制汽车</p>
<p><img src="/assets/blogImg/texiao1.png" alt=""></p>
<p>杰森和布莱迪</p>
<p><img src="/assets/blogImg/bulaidi.png" alt=""></p>
<p>外星人国度</p>
<p><img src="/assets/blogImg/waixin.png" alt=""></p>
<p>王尼玛</p>
<p><img src="/assets/blogImg/wangnima.png" alt=""></p>
<p>假面骑士</p>
<p><img src="/assets/blogImg/jiamian.png" alt=""></p>
<p>核弹</p>
<p><img src="/assets/blogImg/hedan.png" alt=""></p>
<p>岛屿</p>
<p><img src="/assets/blogImg/daoyu.png" alt=""></p>
<p>总的来说GTA真是帅，真是神，啥都能改，啥都能做，属于一个高度自由的可编辑单机游戏<br>，凡是你觉得有意思的东西都可以弄到游戏里面来玩儿，可联机可单机，上可九天揽月，下可五洋捉鳖，可能大家看我说的这么牛逼，就想说，你咋不上天呢？恩，没错，这游戏确实可以送你上天</p>
<p><img src="/assets/blogImg/shangtian.png" alt=""></p>
<p><img src="/assets/blogImg/shangtian2.png" alt=""></p>
<p>最后帖上一张我大GTA5的model龙图</p>
<p><img src="/assets/blogImg/long.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/elin1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;小的时候玩什么？2007年我才学会自己申请QQ，那时候记性不好，还把QQ号写在纸上，去网吧的时候，老是揣个小纸条儿。&lt;br&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://yoursite.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>全明星搞笑阵容</title>
    <link href="http://yoursite.com/2016/12/09/zwh5/"/>
    <id>http://yoursite.com/2016/12/09/zwh5/</id>
    <published>2016-12-09T07:22:00.000Z</published>
    <updated>2016-12-09T07:23:02.946Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/zhuge1.png" alt=""><br>诸葛亮下来战书，约我等明日再战，如何对敌?</p>
<a id="more"></a>
<embed height="700" width="850" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=5829792&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/zhuge1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;诸葛亮下来战书，约我等明日再战，如何对敌?&lt;/p&gt;
    
    </summary>
    
    
      <category term="视频" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>向天再笑500年</title>
    <link href="http://yoursite.com/2016/12/09/zwh4/"/>
    <id>http://yoursite.com/2016/12/09/zwh4/</id>
    <published>2016-12-09T02:36:00.000Z</published>
    <updated>2016-12-09T07:20:27.357Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/kangxi1.png" alt=""><br>众卿家平身，看我高歌一曲~</p>
<a id="more"></a>
<embed height="700" width="850" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=7422418&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/kangxi1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;众卿家平身，看我高歌一曲~&lt;/p&gt;
    
    </summary>
    
    
      <category term="视频" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>为什么人的脚为什么比人的脸和手都要白呢？因为它老藏着。</title>
    <link href="http://yoursite.com/2016/12/07/zwh3/"/>
    <id>http://yoursite.com/2016/12/07/zwh3/</id>
    <published>2016-12-07T10:36:00.000Z</published>
    <updated>2016-12-09T07:22:33.557Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/caocao1.png" alt=""></p>
<p>一生中最佩服的历史人物司马懿，懂得忍辱负重，待时而起的大才之人。</p>
<a id="more"></a>
<p><img src="/assets/blogImg/sima1.png" alt=""><br><img src="/assets/blogImg/sima2.png" alt=""><br><img src="/assets/blogImg/sima3.png" alt=""><br><img src="/assets/blogImg/sima4.png" alt=""><br><img src="/assets/blogImg/sima5.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/caocao1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一生中最佩服的历史人物司马懿，懂得忍辱负重，待时而起的大才之人。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title> 今年我给自己定了三个目标</title>
    <link href="http://yoursite.com/2016/12/07/zwh2/"/>
    <id>http://yoursite.com/2016/12/07/zwh2/</id>
    <published>2016-12-07T09:42:00.000Z</published>
    <updated>2016-12-08T02:04:47.976Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/blog-7.png" alt=""><br>生于忧患死于安乐，要想在这看似动荡浮躁的时代安身立命唯有找一份事业,认真踏实去干; 一直干到如同庖丁解牛的境界。 这样，身也安了,命也立了。 就是这样。<br><a id="more"></a><br>1.学会并使用web三大框架(React.js、Vue.js、AngularJs)增加知识面</p>
<p><img src="/assets/blogImg/blog-4.png" alt=""></p>
<p><img src="/assets/blogImg/blog-3.png" alt=""></p>
<p>2.搞定英语三级课程<br><img src="/assets/blogImg/blog-5.png" alt=""> </p>
<p>3.在高新区找一份新工作<br><img src="/assets/blogImg/blog-6.png" alt=""></p>
<p>箭在弦上，不得不发。</p>
<p><img src="/assets/blogImg/blog-2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/blog-7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;生于忧患死于安乐，要想在这看似动荡浮躁的时代安身立命唯有找一份事业,认真踏实去干; 一直干到如同庖丁解牛的境界。 这样，身也安了,命也立了。 就是这样。&lt;br&gt;
    
    </summary>
    
    
      <category term="目标" scheme="http://yoursite.com/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title> 2016年我第一次写博客</title>
    <link href="http://yoursite.com/2016/12/06/zwh1/"/>
    <id>http://yoursite.com/2016/12/06/zwh1/</id>
    <published>2016-12-06T07:29:00.000Z</published>
    <updated>2016-12-07T09:47:15.815Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/blog-1.png" alt=""><br>&emsp;&emsp;小时候呢总想看看20岁的自己到底会变成什么样子，那时候哪会想到如今的自己居然是个碌碌无为的程序员，怪命运？还是自己？现在的我只想要过好当下的每一秒，哪怕是呼吸的那一秒，也要好好珍惜，因为我深知如今的我不可以再像从前了，这里引用我曾经看到过的一句话，人一旦看到真相了，就很难再闭上眼睛假装不知道。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/blog-1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;小时候呢总想看看20岁的自己到底会变成什么样子，那时候哪会想到如今的自己居然是个碌碌无为的程序员，怪命运？还是自己？现在的我只想要过好当下的每一秒，哪怕
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
