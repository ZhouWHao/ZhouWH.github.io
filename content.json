[{"title":"javascript全栈之道","date":"2016-12-10T02:33:00.000Z","path":"2016/12/10/zwh7/","text":"JavaScript 全栈工程师培训教程 一、培训准备参加培训的学员，事先应该做好以下准备工作。 知识准备 掌握 HTML、CSS、JS 的基本用法 掌握命令行的基本用法安装 Git 请到官网 git-scm.com 或国内的下载站，下载安装包。 安装 Node请到 Node 官网nodejs.org，或者国内镜像npm.taobao.org/mirrors/node，下载安装包。推荐安装最新的稳定版，目前是v6.x。 安装完成后，命令行执行下面的命令，确认是否安装成功。 $ node -v v6.9.1 Node 的模块管理器 npm 会一起安装好。由于 Node 的官方模块仓库网速太慢，模块仓库需要切换到阿里的源。 $ npm config set registry https://registry.npm.taobao.org/ 执行下面的命令，确认是否切换成功。 $ npm config get registry 安装 PostmanPostman 是一个 HTTP 通信测试工具，REST API 的练习会用到它。 请到官网 GetPostman.com 下载独立安装包；也可以参考这篇文章www.cnblogs.com/mafly/p/postman.html，下载 Chrome 浏览器的插件，它们的效果一样。 安装示例库所有的讲义和练习源码，都是开源的，网址是 github.com/ruanyf/jstraining。执行下面的命令，将这个库拷贝到你的硬盘上。 # Linux &amp; Mac $ git clone git@github.com:ruanyf/jstraining.git # Windows $ git clone https://github.com/ruanyf/jstraining.git 如果因为种种原因，Git 命令行无法使用，也可以直接下载压缩包，地址是 https://github.com/ruanyf/jstraining/archive/master.zip 。 二、前端开发的历史和趋势 什么是前端 前端：针对浏览器的开发，代码在浏览器运行 后端：针对服务器的开发，代码在服务器运行 前后端不分的时代互联网发展的早期，前后端开发是一体的，前端代码是后端代码的一部分。 后端收到浏览器的请求 生成静态页面 发送到浏览器 后端 MVC 的开发模式那时的网站开发，采用的是后端 MVC 模式。 Model（模型层）：提供/保存数据 Controller（控制层）：数据处理，实现业务逻辑 View（视图层）：展示数据，提供用户界面 前端只是后端 MVC 的 V。 以 PHP 框架 Laravel 为例。 前端工程师的角色那时的前端工程师，实际上是模板工程师，负责编写页面模板。 后端代码读取模板，替换变量，渲染出页面。 典型的 PHP 模板&lt;html&gt; &lt;head&gt;&lt;title&gt;Car {{ $car->id }}&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;Car {{ $car->id }}&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Make: {{ $car->make }}&lt;/li&gt; &lt;li&gt;Model: {{ $car->model }}&lt;/li&gt; &lt;li&gt;Produced on: {{ $car->produced_on }}&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; AjaxAjax 技术诞生，改变了一切。 2004年：Gmail 2005年：Google 地图 前端不再是后端的模板，可以独立得到各种数据。 Ajax 技术促成了 Web 2.0 的诞生。 web2.png Web 1.0：静态网页，纯内容展示 Web 2.0：动态网页，富交互，前端数据处理 从那时起，前端变得复杂了，对前端工程师的要求越来越高。 前端 MVC 框架 前端通过 Ajax 得到数据，因此也有了处理数据的需求。 前端代码变得也需要保存数据、处理数据、生成视图，这导致了前端 MVC 框架的诞生。 2010年，Backbone.js Backbone.jsBackbone 将前端代码分成两个基本部分。 Model：管理数据 View：数据的展现 前端 ControllerBackbone 只有 M 和 V，没有 C。因为，前端 Controller 与后端不同。 不需要，也不应该处理业务逻辑 只需要处理 UI 逻辑，响应用户的一举一动 所以，前端 Controller 相对比较简单。Backbone 没有 C，只用事件来处理 UI 逻辑。 var AppView = Backbone.View.extend({ // ... events: { &quot;keypress #new-todo&quot;: &quot;createOnEnter&quot;, &quot;click #clear-completed&quot;: &quot;clearCompleted&quot;, &quot;click #toggle-all&quot;: &quot;toggleAllComplete&quot; }, }); Router前端还有一种天然的方法，可以切换视图，那就是 URL。 通过 URL 切换视图，这就是 Router（路由）的作用。以 Backbone 为例。 App.Router = Backbone.Router.extend({ routes: { &apos;&apos;: &apos;index&apos;, &apos;show&apos;: &apos;show&apos; }, index: function () { $(document.body).append(&quot;调用了 Index 路由&quot;); }, show: function () { $(document.body).append(&quot;调用了 Show 路由&quot;); }, }); 示例：Backbone Router打开demos/backbone-demo/index.html，按照《操作说明》，查看示例。 MVVM 模式另一些框架提出 MVVM 模式，用 View Model 代替 Controller。 Model View View-Model：简化的 Controller，唯一作用就是为 View 提供处理好的数据，不含其他逻辑。 本质：view 绑定 view-model，视图与数据模型强耦合。数据的变化实时反映在 view 上，不需要手动处理。 SPA前端可以做到： 读写数据 切换视图 用户交互 这意味着，网页其实是一个应用程序。 SPA = Single-page application2010年后，前端工程师从开发页面，变成了开发”前端应用“（跑在浏览器里面的应用程序）。 AngularGoogle 公司推出的 Angular 是最流行的 MVVM 前端框架。 它的风格属于 HTML 语言的增强，核心概念是双向绑定。 示例：Angular 的双向绑定浏览器打开demos/angular-demo/index.html，可以看到一个输入框。 &lt;div ng-app=&quot;&quot;&gt; &lt;p&gt; 姓名 : &lt;input type=&quot;text&quot; ng-model=&quot;name&quot; placeholder=&quot;在这里输入您的大名&quot; &gt; &lt;/p&gt; &lt;h1&gt;你好，{{name}}&lt;/h1&gt; &lt;/div&gt; VueVue.js 是现在很热门的一种前端 MVVM 框架。 它的基本思想与 Angular 类似，但是用法更简单，而且引入了响应式编程的概念。 示例：Vue 的双向绑定Vue 的模板与数据，是双向绑定的。 打开demos/vue-demo/index1.html，按照《操作说明》，查看示例。 HTML 代码 &lt;div id=&quot;journal&quot;&gt; &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt; &lt;div&gt;{{message}}&lt;/div&gt; &lt;/div&gt; JS 代码 var journal = new Vue({ el: &apos;#journal&apos;, data: { message: &apos;Your first entry&apos; } }); 前后端分离 Ajax -&gt; 前端应用兴起 智能手机 -&gt; 多终端支持这两个原因，导致前端开发方式发生根本的变化。 前端不再是后端 MVC 中的 V，而是单独的一层。 REST 接口前后端分离以后，它们之间通过接口通信。 后端暴露出接口，前端消费后端提供的数据。 后端接口一般是 REST 形式，前后端的通信协议一般是 HTTP。 Node2009年，Node 项目诞生，它是服务器上的 JavaScript 运行环境。 Node = JavaScript + 操作系统 API Node 的意义 JavaScript 成为服务器脚本语言，与 Python 和 Ruby 一样 JavaScript 成为唯一的浏览器和服务器都支持的语言 前端工程师可以编写后端程序了 前端开发模式的根本改变 Node 环境下开发 大量使用服务器端工具 引入持续集成等软件工程的标准流程 开发完成后，编译成浏览器可以运行的脚本，放上 CDN 全栈工程师前端工程师正在转变为全栈工程师 一个人负责开发前端和后端 从数据库到 UI 的所有开发 全栈技能怎样才能称为全栈工程师？ 传统前端技能：HTML、JavaScript、CSS 一门后端语言 移动端开发：iOS / Android / HTML5 其他技能：数据库、HTTP 等等 软件行业的发展动力历史演变：前后端不分 -&gt; 前后端分离 -&gt; 全栈工程师 动力：更加产业化、大规模地生产软件 效率更高 成本更低 通用性好、能够快速产出的技术最终会赢，单个程序员的生产力要求越来越高。 H5 就是一个最好的例子为什么 H5 技术会赢得移动端？ 开发速度快：Native 需要重新编译才能看到结果，H5 是即时输出 开发成本低：Native 需要两个开发团队，H5 只要一个 快速发布：安卓 Native 新版本需要24小时，iOS 需要 3 ～ 4 天，H5 可以随时更新 未来软件的特点 联网 高并发 分布式 跨终端现在基于 Web 的前端技术，将演变为未来所有软件的通用的 GUI 解决方案。 未来只有两种软件工程师 端工程师 手机端 PC 端 TV 端 VR 端 …… 云工程师","tags":[{"name":"web前端","slug":"web前端","permalink":"http://yoursite.com/tags/web前端/"}]},{"title":"游戏纯属爱好","date":"2016-12-09T07:28:00.000Z","path":"2016/12/09/zwh6/","text":"&emsp;&emsp;小的时候玩什么？2007年我才学会自己申请QQ，那时候记性不好，还把QQ号写在纸上，去网吧的时候，老是揣个小纸条儿。&emsp;&emsp;QQ差不多玩儿了一年多不知不觉就记住了，不可否认的说，那时候确实沉迷游戏，小游戏玩小霸王游戏机的超级玛丽，大游戏到Ps4的铁拳，那时候去网吧简直就是一种奢华，平时都是玩儿街机，就投币那种，一块钱10个币，后来玩的多了，就开始联机玩儿GTA和一些主流的单机盗版游戏，什么单机CF，单机DNF就没有不玩儿的，每天10块钱的零花钱，全都省吃俭用的留下来，买盗版光碟，装单机游戏玩儿，就随便一个游戏能玩儿好几个月，下面来介绍一下我玩儿过的感觉比较经典的单机游戏 1.真三国无双 那时候是我第一次接触到这种日本制作的三国题材的大型单机游戏，当时用的配的垃圾联想电脑，集成显卡，G610，也就只能玩玩这种低端的，配置要求不是很高。 2.GTA 圣安地列斯 神龙 控制汽车 杰森和布莱迪 外星人国度 王尼玛 假面骑士 核弹 岛屿 总的来说GTA真是帅，真是神，啥都能改，啥都能做，属于一个高度自由的可编辑单机游戏，凡是你觉得有意思的东西都可以弄到游戏里面来玩儿，可联机可单机，上可九天揽月，下可五洋捉鳖，可能大家看我说的这么牛逼，就想说，你咋不上天呢？恩，没错，这游戏确实可以送你上天 最后帖上一张我大GTA5的model龙图","tags":[{"name":"游戏","slug":"游戏","permalink":"http://yoursite.com/tags/游戏/"}]},{"title":"全明星搞笑阵容","date":"2016-12-09T07:22:00.000Z","path":"2016/12/09/zwh5/","text":"诸葛亮下来战书，约我等明日再战，如何对敌?","tags":[{"name":"视频","slug":"视频","permalink":"http://yoursite.com/tags/视频/"}]},{"title":"向天再笑500年","date":"2016-12-09T02:36:00.000Z","path":"2016/12/09/zwh4/","text":"众卿家平身，看我高歌一曲~","tags":[{"name":"视频","slug":"视频","permalink":"http://yoursite.com/tags/视频/"}]},{"title":"为什么人的脚为什么比人的脸和手都要白呢？因为它老藏着。","date":"2016-12-07T10:36:00.000Z","path":"2016/12/07/zwh3/","text":"一生中最佩服的历史人物司马懿，懂得忍辱负重，待时而起的大才之人。","tags":[{"name":"日志","slug":"日志","permalink":"http://yoursite.com/tags/日志/"}]},{"title":" 今年我给自己定了三个目标","date":"2016-12-07T09:42:00.000Z","path":"2016/12/07/zwh2/","text":"生于忧患死于安乐，要想在这看似动荡浮躁的时代安身立命唯有找一份事业,认真踏实去干; 一直干到如同庖丁解牛的境界。 这样，身也安了,命也立了。 就是这样。1.学会并使用web三大框架(React.js、Vue.js、AngularJs)增加知识面 2.搞定英语三级课程 3.在高新区找一份新工作 箭在弦上，不得不发。","tags":[{"name":"目标","slug":"目标","permalink":"http://yoursite.com/tags/目标/"}]},{"title":" 2016年我第一次写博客","date":"2016-12-06T07:29:00.000Z","path":"2016/12/06/zwh1/","text":"&emsp;&emsp;小时候呢总想看看20岁的自己到底会变成什么样子，那时候哪会想到如今的自己居然是个碌碌无为的程序员，怪命运？还是自己？现在的我只想要过好当下的每一秒，哪怕是呼吸的那一秒，也要好好珍惜，因为我深知如今的我不可以再像从前了，这里引用我曾经看到过的一句话，人一旦看到真相了，就很难再闭上眼睛假装不知道。","tags":[{"name":"日志","slug":"日志","permalink":"http://yoursite.com/tags/日志/"}]}]